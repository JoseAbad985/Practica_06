/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.ups.practica_06;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author samanthasuquilandaquilli
 */
public class VentanaGestionarDirectorios extends javax.swing.JFrame {

    private DefaultTreeModel modelo;
    private DefaultMutableTreeNode root;
    private Controlador controlador;

    /**
     * Creates new form VentanaGestionarDirectorios
     */
    public VentanaGestionarDirectorios() {
        initComponents();
        this.inicializarMenu();
        controlador = new Controlador();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopMenuGestionar = new javax.swing.JPopupMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jFileChooser3 = new javax.swing.JFileChooser();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        btnGestionarDirectorios = new javax.swing.JButton();
        txtRuta = new javax.swing.JTextField();
        lblRuta = new javax.swing.JLabel();
        btnListarDirectorios = new javax.swing.JButton();
        btnListarArchivosOcultos = new javax.swing.JButton();
        btnListarDirectoriosOcultos = new javax.swing.JButton();
        btnListarArchivos = new javax.swing.JButton();
        btnListarArchivosYDirectorios = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        scrollbar1 = new java.awt.Scrollbar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTreeDatos = new javax.swing.JTree();
        btnMostrarInformacion = new javax.swing.JButton();
        lblRuta1 = new javax.swing.JLabel();

        PopMenuGestionar.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N

        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jFileChooser2.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        jFileChooser3.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jInternalFrame2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gestionar Directorios", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 14))); // NOI18N
        jInternalFrame2.setClosable(true);
        jInternalFrame2.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame2.setIconifiable(true);
        jInternalFrame2.setMaximizable(true);
        jInternalFrame2.setResizable(true);
        jInternalFrame2.setVisible(true);
        jInternalFrame2.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGestionarDirectorios.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnGestionarDirectorios.setText("Gestionar Directorios");
        btnGestionarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGestionarDirectoriosActionPerformed(evt);
            }
        });
        jPanel1.add(btnGestionarDirectorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 270, 60));

        txtRuta.setEditable(false);
        txtRuta.setToolTipText("Ingrese la ruta co  la cual se va a trabajar");
        txtRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRutaActionPerformed(evt);
            }
        });
        jPanel1.add(txtRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, 410, 30));

        lblRuta.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        lblRuta.setText("Su ruta es:");
        jPanel1.add(lblRuta, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 120, 30));

        btnListarDirectorios.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnListarDirectorios.setText("Listar Directorios");
        btnListarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectoriosActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarDirectorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 210, 30));

        btnListarArchivosOcultos.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnListarArchivosOcultos.setText("Listar Archivos Ocultos");
        btnListarArchivosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosOcultosActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarArchivosOcultos, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, 190, 30));

        btnListarDirectoriosOcultos.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnListarDirectoriosOcultos.setText("Listar Directorios Ocultos");
        btnListarDirectoriosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectoriosOcultosActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarDirectoriosOcultos, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, -1, 30));

        btnListarArchivos.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnListarArchivos.setText("Listar Archivos");
        btnListarArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarArchivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 210, 30));

        btnListarArchivosYDirectorios.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnListarArchivosYDirectorios.setText("Listar Directorios y Archivos");
        btnListarArchivosYDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosYDirectoriosActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarArchivosYDirectorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 210, 30));

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, 350, 290));

        scrollbar1.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                scrollbar1AdjustmentValueChanged(evt);
            }
        });
        jPanel1.add(scrollbar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 180, -1, 290));

        jTreeDatos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTreeDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeDatosMouseClicked(evt);
            }
        });
        jTreeDatos.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeDatosValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTreeDatos);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 430, 290));

        btnMostrarInformacion.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnMostrarInformacion.setText("Mostrar Informacion");
        btnMostrarInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarInformacionActionPerformed(evt);
            }
        });
        jPanel1.add(btnMostrarInformacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 510, 200, 30));

        lblRuta1.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        lblRuta1.setText("Seleccione un elemento: ");
        jPanel1.add(lblRuta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, -1, -1));

        jInternalFrame2.getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 860, 580));

        getContentPane().add(jInternalFrame2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 870, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGestionarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGestionarDirectoriosActionPerformed

        btnGestionarDirectorios.setComponentPopupMenu(PopMenuGestionar);

    }//GEN-LAST:event_btnGestionarDirectoriosActionPerformed

    private void btnListarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectoriosActionPerformed
        int seleccion = 0;
        jFileChooser2.showOpenDialog(null);
        if (seleccion == jFileChooser2.APPROVE_OPTION) {
            File fichero = jFileChooser2.getSelectedFile();
            actualizarDirectorios(fichero);

        } else {
            txtArea.setText("No se encontró el fichero");
        }
    }//GEN-LAST:event_btnListarDirectoriosActionPerformed

    private void btnListarArchivosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosOcultosActionPerformed
        int seleccion = 0;
        jFileChooser3.showOpenDialog(null);
        if (seleccion == jFileChooser3.APPROVE_OPTION) {
            File fichero = jFileChooser3.getSelectedFile();
            actualizarArchivosOcultos(fichero);

        } else {
            txtArea.setText("No se encontró el fichero");
        }
    }//GEN-LAST:event_btnListarArchivosOcultosActionPerformed

    private void btnListarDirectoriosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectoriosOcultosActionPerformed
        int seleccion = 0;
        jFileChooser3.showOpenDialog(null);
        if (seleccion == jFileChooser3.APPROVE_OPTION) {
            File fichero = jFileChooser3.getSelectedFile();
            actualizarDirectoriosOcultos(fichero);

        } else {
            txtArea.setText("No se encontró el fichero");
        }
    }//GEN-LAST:event_btnListarDirectoriosOcultosActionPerformed

    private void btnListarArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosActionPerformed
        int seleccion = 0;
        jFileChooser3.showOpenDialog(null);
        if (seleccion == jFileChooser3.APPROVE_OPTION) {
            File fichero = jFileChooser3.getSelectedFile();
            actualizarArchivos(fichero);

        } else {
            txtArea.setText("No se encontró el fichero");
        }
    }//GEN-LAST:event_btnListarArchivosActionPerformed

    private void btnListarArchivosYDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosYDirectoriosActionPerformed
        int seleccion = 0;
        jFileChooser1.showOpenDialog(null);
        if (seleccion == jFileChooser1.APPROVE_OPTION) {
            File fichero = jFileChooser1.getSelectedFile();
            actualizar(fichero);
            txtRuta.setText(fichero.getPath());
        } else {
            txtArea.setText("No se encontró el fichero");
        }
    }//GEN-LAST:event_btnListarArchivosYDirectoriosActionPerformed

    private void btnMostrarInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarInformacionActionPerformed
        // Obtener las carpetas y subcarpetas en la ruta deseada
        String ruta = txtRuta.getText();
        File directorioRaiz = new File(ruta);
        if (directorioRaiz.exists()
                && directorioRaiz.isDirectory()) {
            agregarCarpetasAlArbol(directorioRaiz, rootNode);
        } else {
            JOptionPane.showMessageDialog(this, "La ruta no es válida o no es un directorio.");
        }
    }//GEN-LAST:event_btnMostrarInformacionActionPerformed

    private void scrollbar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_scrollbar1AdjustmentValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_scrollbar1AdjustmentValueChanged

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jTreeDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeDatosMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTreeDatosMouseClicked

    private void txtRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRutaActionPerformed

    private void jTreeDatosValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeDatosValueChanged
        //which node was selected
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTreeDatos.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        String nodeInfo = txtRuta.getText();
        txtArea.setText("");
        File file = new File(nodeInfo);
        File fileInfo = new File(file.getAbsolutePath() + "\\" + jTreeDatos.getLastSelectedPathComponent());
        String permisosLec = "Falso";
        String permisosEsc = "Falso";
        if (fileInfo.canRead()) {
            permisosLec = "Verdadero";
        }
        if (fileInfo.canWrite()) {
            permisosEsc = "Verdadero";
        }
        long ms = fileInfo.lastModified();
        Date d = new Date(ms);
        Calendar c = new GregorianCalendar();
        c.setTime(d);
        String dia = Integer.toString(c.get(Calendar.DATE));
        String mes = Integer.toString(c.get(Calendar.MONTH));
        String annio = Integer.toString(c.get(Calendar.YEAR));
        //if node is a leaf
        if (node.isLeaf()) {
            //txtArea.setText("El peso es: " + file.getAbsolutePath()+ "\\" + jTreeDatos.getLastSelectedPathComponent());
            txtArea.setText("El path absoluto es: " + fileInfo.getAbsolutePath()
                    + "\nEl peso es: " + fileInfo.length() + "bytes"
                    + "\nTiene permisos de lectura: " + permisosLec
                    + "\nTiene permisos de escritura: " + permisosEsc
                    + "\n La Ultima Fecha de Modificacion es: " + dia + "/" + mes + "/" + annio);
        }
    }//GEN-LAST:event_jTreeDatosValueChanged
    public void actualizarDirectorios(File fichero) {
        txtArea.setText("La carpeta raiz es " + fichero.getAbsolutePath());
        root = new DefaultMutableTreeNode(fichero.getName());
        modelo = new DefaultTreeModel(root);

        creaDirectorios(root, fichero);

        jTreeDatos.setModel(modelo);

    }

    public void actualizarDirectoriosOcultos(File fichero) {
        txtArea.setText("La carpeta raiz es " + fichero.getAbsolutePath());
        root = new DefaultMutableTreeNode(fichero.getName());
        modelo = new DefaultTreeModel(root);

        creaDirectoriosOcultos(root, fichero);

        jTreeDatos.setModel(modelo);

    }

    public void actualizarArchivos(File fichero) {
        txtArea.setText("La carpeta raiz es " + fichero.getAbsolutePath());
        root = new DefaultMutableTreeNode(fichero.getName());
        modelo = new DefaultTreeModel(root);

        creaArchivos(root, fichero);

        jTreeDatos.setModel(modelo);

    }

    public void actualizarArchivosOcultos(File fichero) {
        txtArea.setText("La carpeta raiz es " + fichero.getAbsolutePath());
        root = new DefaultMutableTreeNode(fichero.getName());
        modelo = new DefaultTreeModel(root);

        creaArchivosOcultos(root, fichero);

        jTreeDatos.setModel(modelo);

    }

    public void actualizar(File fichero) {
        txtArea.setText("La carpeta raiz es " + fichero.getAbsolutePath());
        root = new DefaultMutableTreeNode(fichero.getName());
        modelo = new DefaultTreeModel(root);

        crea(root, fichero);

        jTreeDatos.setModel(modelo);
    }
    FileFilter directoriosFilefilter = new FileFilter() {
        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }
            return false;
        }
    };

    FileFilter directoriosOcultosFilefilter = new FileFilter() {
        public boolean accept(File file) {
            if (file.isDirectory() && file.isHidden()) {
                return true;
            }
            return false;
        }
    };

    FileFilter archivosFilefilter = new FileFilter() {
        public boolean accept(File file) {
            if (file.isFile()) {
                return true;
            }
            return false;
        }
    };
    FileFilter archivosOcultosFilefilter = new FileFilter() {
        public boolean accept(File file) {
            if (file.isFile() && file.isHidden()) {
                return true;
            }
            return false;
        }
    };

    FileFilter datos = new FileFilter() {
        public boolean accept(File file, String nombre) {
            if (file.getName().equals(nombre)) {
                return true;
            }
            return false;
        }

        @Override
        public boolean accept(File pathname) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    };
    //Seleccionar un archivo o directorio del jtree

    private void creaDirectorios(DefaultMutableTreeNode nodo, File carpeta) {

        File[] archivos = carpeta.listFiles(directoriosFilefilter);

        if (archivos != null) {
            int contador = 0;
            for (File f : archivos) {
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(f.getName());
                modelo.insertNodeInto(hijo, nodo, contador);
                contador++;

                if (f.isDirectory()) {
                    creaDirectorios(hijo, f);
                }
            }
        }
    }

    private void creaDirectoriosOcultos(DefaultMutableTreeNode nodo, File carpeta) {

        File[] archivos = carpeta.listFiles(directoriosOcultosFilefilter);

        if (archivos != null) {
            int contador = 0;
            for (File f : archivos) {
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(f.getName());
                modelo.insertNodeInto(hijo, nodo, contador);
                contador++;

                if (f.isDirectory()) {
                    creaDirectorios(hijo, f);
                }
            }
        }
    }

    private void crea(DefaultMutableTreeNode nodo, File carpeta) {

        File[] archivos = carpeta.listFiles();

        if (archivos != null) {
            int contador = 0;
            for (File f : archivos) {
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(f.getName());
                modelo.insertNodeInto(hijo, nodo, contador);
                contador++;

                if (f.isDirectory()) {
                    crea(hijo, f);
                }
            }
        }
    }

    private void creaArchivos(DefaultMutableTreeNode nodo, File carpeta) {

        File[] archivos = carpeta.listFiles(archivosFilefilter);

        if (archivos != null) {
            int contador = 0;
            for (File f : archivos) {
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(f.getName());
                modelo.insertNodeInto(hijo, nodo, contador);
                contador++;

                if (f.isDirectory()) {
                    creaArchivos(hijo, f);
                }
            }
        }
    }

    private void creaArchivosOcultos(DefaultMutableTreeNode nodo, File carpeta) {

        File[] archivos = carpeta.listFiles(archivosOcultosFilefilter);
        if (archivos != null) {
            int contador = 0;
            for (File f : archivos) {
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(f.getName());
                modelo.insertNodeInto(hijo, nodo, contador);
                contador++;
                if (f.isDirectory()) {
                    creaDirectorios(hijo, f);
                }
            }
        }
    }

    private void inicializarMenu() {
        String ruta = txtRuta.getText();

        JMenuItem crear = new JMenuItem("Crear           CTRL+N");
        JMenuItem eliminar = new JMenuItem("Eliminar        CTRL+E");
        JMenuItem renombrar = new JMenuItem("Renombrar   CTRL+R");
        JMenuItem salir = new JMenuItem("Salir             CTRL+Esc");

        crear.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK));
        eliminar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_DOWN_MASK));
        renombrar.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.CTRL_DOWN_MASK));
        salir.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, InputEvent.CTRL_DOWN_MASK));

        PopMenuGestionar.add(crear);
        PopMenuGestionar.add(eliminar);
        PopMenuGestionar.add(renombrar);
        PopMenuGestionar.add(salir);

        crear.addActionListener(new ActionListener() {

            @Override

            public void actionPerformed(ActionEvent e) {
                String ruta = txtRuta.getText();
                JOptionPane.showMessageDialog(null, "Se va a poder crear directorios o archivos");
                if (ruta.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No se ha ingresado una ruta");
                } else {
                    Object[] opciones = {"Directorio", "Archivo"};
                    int seleccion = JOptionPane.showOptionDialog(null, "Qué desea crear, un directorio o un archivo?", "crear", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
                    if (seleccion == JOptionPane.YES_OPTION) {
                        String nombreDirectorio = JOptionPane.showInputDialog(null, "Ingrese el nombre del directorio: ", "Crear Directorio", JOptionPane.PLAIN_MESSAGE);

                        if (nombreDirectorio != null && !nombreDirectorio.isEmpty()) {
                            controlador.crearDirectorio(ruta, nombreDirectorio);
                            JOptionPane.showMessageDialog(null, "Directorio creado exitosamente: " + nombreDirectorio);
                        } else {
                            JOptionPane.showMessageDialog(null, "El nombre ingresado no es valido");

                        }
                    } else if (seleccion == JOptionPane.NO_OPTION) {
                        String nombreArchivo = JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo: ", "Crear Archivo", JOptionPane.PLAIN_MESSAGE);
                        if (nombreArchivo != null && !nombreArchivo.isEmpty()) {
                            try {
                                controlador.creaArchivo(ruta, nombreArchivo);
                            } catch (IOException ex) {
                                Logger.getLogger(VentanaGestionarDirectorios.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            JOptionPane.showMessageDialog(null, "Archivo creado exitosamente: " + nombreArchivo);
                        } else {
                            JOptionPane.showMessageDialog(null, "El nombre ingresado no es valido");

                        }

                    }
                }
            }

        });

        eliminar.addActionListener(new ActionListener() {

            @Override

            public void actionPerformed(ActionEvent e) {
                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeDatos.getSelectionPath().getLastPathComponent();
                String rutaCompleta = obtenerRutaCompletaDesdeNodo(nodoSeleccionado);

                if (nodoSeleccionado.getAllowsChildren()) {
                    int confirmacion = JOptionPane.showConfirmDialog(null, "Esta seguro que quiere eliminar?");

                    if (confirmacion == JOptionPane.YES_OPTION) {
                        controlador.eliminarArchivoODirectorio(rutaCompleta);
                        DefaultMutableTreeNode nodoPadre = (DefaultMutableTreeNode) nodoSeleccionado.getParent();
                        actualizarJTree(nodoPadre);
                        JOptionPane.showMessageDialog(null, "Directorio eliminado: " + rutaCompleta);
                        
                    }

                } else {
                    int confirmacion = JOptionPane.showConfirmDialog(null, "Esta seguro que quiere eliminar?");

                    if (confirmacion == JOptionPane.YES_OPTION) {
                        controlador.eliminarArchivoODirectorio(rutaCompleta);
                        DefaultMutableTreeNode nodoPadre = (DefaultMutableTreeNode) nodoSeleccionado.getParent();
                        actualizarJTree(nodoPadre);
                        JOptionPane.showMessageDialog(null, "Archivo eliminado: " + rutaCompleta);
                        

                    }
                }
            }

        });

        renombrar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTreeDatos.getLastSelectedPathComponent();
                TreeNode[] si = nodoSeleccionado.getPath();
                String path = "";
                String pathRen = "";
                for (TreeNode treeNode : si) {
                    path = path + "/" + treeNode;
                }
                for (int i = 0; i < si.length - 1; i++) {
                    pathRen = pathRen + "/" + si[i];
                }
                String pathRenF = pathRen.substring(1);
                String pathF = path.substring(1);
                String nuevoNombre = JOptionPane.showInputDialog(null, "Ingrese el nuevo nombre:", "Renombrar", JOptionPane.PLAIN_MESSAGE);

                controlador.renombrarArchivo(pathRenF, pathF, nuevoNombre);
                JOptionPane.showMessageDialog(null, "Directorio renombrado: ");
            }
        });

        salir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0); // Salir del programa
            }
        });
    }

    // Crear el JTree con el nodo raíz
    DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Root");

    private static void agregarCarpetasAlArbol(File directorio, DefaultMutableTreeNode parentNode) {
        File[] archivos = directorio.listFiles();
        if (archivos != null) {
            for (File archivo : archivos) {
                int contador = 0;
                DefaultMutableTreeNode nodoHijo = new DefaultMutableTreeNode(archivo.getName());
                DefaultTreeModel modelo = new DefaultTreeModel(parentNode);
                modelo.insertNodeInto(nodoHijo, parentNode, contador);
                contador++;
                if (archivo.isDirectory()) {

                    agregarCarpetasAlArbol(archivo, nodoHijo);
                }
            }
        }
    }

    private void actualizarJTree(DefaultMutableTreeNode nodoPadre) {
        DefaultTreeModel modelo = (DefaultTreeModel) jTreeDatos.getModel();
        modelo.reload(nodoPadre);
    }

    private String obtenerRutaCompletaDesdeNodo(DefaultMutableTreeNode nodo) {
        StringBuilder rutaCompleta = new StringBuilder();
        while (nodo != null) {
            Object objeto = nodo.getUserObject();
            if (objeto instanceof String) {
                String nombre = (String) objeto;
                rutaCompleta.insert(0, nombre);
                rutaCompleta.insert(0, "/");
            }
            nodo = (DefaultMutableTreeNode) nodo.getParent();

        }
        System.out.println(rutaCompleta.toString());
        return rutaCompleta.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaGestionarDirectorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaGestionarDirectorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaGestionarDirectorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaGestionarDirectorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaGestionarDirectorios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu PopMenuGestionar;
    private javax.swing.JButton btnGestionarDirectorios;
    private javax.swing.JButton btnListarArchivos;
    private javax.swing.JButton btnListarArchivosOcultos;
    private javax.swing.JButton btnListarArchivosYDirectorios;
    private javax.swing.JButton btnListarDirectorios;
    private javax.swing.JButton btnListarDirectoriosOcultos;
    private javax.swing.JButton btnMostrarInformacion;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JFileChooser jFileChooser3;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTreeDatos;
    private javax.swing.JLabel lblRuta;
    private javax.swing.JLabel lblRuta1;
    private java.awt.Scrollbar scrollbar1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables
}
